/*
Helps to retrieve the frequently executed queries along with their cpu load (total, average)
Sample execution
--To get the top executed procedures from the last 2 hours, excluding system databases:
EXEC dbo.usp_GetTopExecutedStoredProcs @TOPRESULT = 15 , @time_interval = 2, @interval_type = 'hour', @include_system_dbs = 0;
--To get the top executed procedures from the last day, including system databases:
EXEC dbo.usp_GetTopExecutedStoredProcs @TOPRESULT = 15, @time_interval = 1, @interval_type = 'day', @include_system_dbs = 1;
*/
 
 USE ADMIN
 GO


CREATE or Alter PROCEDURE dbo.usp_GetTopExecutedStoredProcs
 
    @time_interval INT,						-- Time interval in either hours or days
    @interval_type NVARCHAR(10) = 'hour',	-- Type of interval: 'hour' or 'day'
    @include_system_dbs BIT = 0,			-- Option to include system databases: 1 = include, 0 = exclude
	@TOPRESULT INT = 10						-- Top Result default = 10
AS
BEGIN
    -- Validate interval type
    IF @interval_type NOT IN ('hour', 'day')
    BEGIN
        PRINT 'Invalid interval type. Please specify "hour" or "day".';
        RETURN;
    END

    -- Set the start time based on the specified interval and type
    DECLARE @start_time DATETIME;

    IF @interval_type = 'hour'
        SET @start_time = DATEADD(HOUR, -@time_interval, GETDATE());
    ELSE
        SET @start_time = DATEADD(DAY, -@time_interval, GETDATE());

    -- CTE for procedure statistics, filtered by the time interval
    WITH ProcStats AS (
        SELECT 
            DB_NAME(ps.database_id) AS DatabaseName,
            OBJECT_NAME(ps.object_id, ps.database_id) AS ProcedureName,
            ps.execution_count AS ExecutionCount,
            COALESCE(ps.total_worker_time, 0) / 1000 AS [Total CPU Time (ms)],
            COALESCE(ps.total_elapsed_time, 0) / 1000 AS [Total Elapsed Time (ms)],
            CASE 
                WHEN COALESCE(ps.execution_count, 0) > 0 
                THEN (COALESCE(ps.total_elapsed_time, 0) / COALESCE(ps.execution_count, 1)) / 1000
                ELSE 0
            END AS [Average Execution Time (ms)], -- Safely handle divide by zero
            COALESCE(ps.total_logical_reads, 0) AS [Total Logical Reads],
            COALESCE(ps.total_physical_reads, 0) AS [Total Physical Reads],
            COALESCE(ps.total_logical_writes, 0) AS [Total Logical Writes],
            ps.last_execution_time AS [Last Execution Time]
        FROM 
            sys.dm_exec_procedure_stats ps
        WHERE 
            ps.last_execution_time >= @start_time -- Filter by the chosen time interval
            AND (@include_system_dbs = 1 OR DB_NAME(ps.database_id) NOT IN ('master', 'msdb', 'model', 'tempdb')) -- Exclude system DBs if requested
    )
    -- Main query to calculate CPU load and other contributions
    
	SELECT TOP (@TOPRESULT)
        DatabaseName,
        ProcedureName,
        ExecutionCount,
        [Total CPU Time (ms)],
        [Total Elapsed Time (ms)],
        [Average Execution Time (ms)],
        [Total Logical Reads],
        [Total Physical Reads],
        [Total Logical Writes],
        [Last Execution Time],
        CASE WHEN SUM([Total CPU Time (ms)]) OVER() > 0 
             THEN ([Total CPU Time (ms)] * 100.0) / SUM([Total CPU Time (ms)]) OVER() 
             ELSE 0 
        END AS [CPU Load Contribution (%)], -- Safely handle if no CPU load is present
        CASE WHEN SUM([Total Elapsed Time (ms)]) OVER() > 0 
             THEN ([Total Elapsed Time (ms)] * 100.0) / SUM([Total Elapsed Time (ms)]) OVER()
             ELSE 0 
        END AS [Elapsed Time Contribution (%)], -- Safely handle elapsed time
        CASE WHEN SUM([Total Logical Reads]) OVER() > 0 
             THEN ([Total Logical Reads] * 100.0) / SUM([Total Logical Reads]) OVER() 
             ELSE 0 
        END AS [Logical Reads Contribution (%)],
        CASE WHEN SUM([Total Physical Reads]) OVER() > 0 
             THEN ([Total Physical Reads] * 100.0) / SUM([Total Physical Reads]) OVER()
             ELSE 0 
        END AS [Physical Reads Contribution (%)]
    FROM 
        ProcStats
    ORDER BY 
        ExecutionCount DESC;
END;
