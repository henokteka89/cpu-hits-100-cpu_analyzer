USE [admin]
GO
/****** Object:  StoredProcedure [dbo].[SP_CPUAnalysis] ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_CPUAnalysis]
    @analysis NVARCHAR(50),
    @database NVARCHAR(128),
    @suspecteduser NVARCHAR(128) = NULL,
    @cpucap BIT = NULL -- Optional parameter to limit CPU cap
AS
/*
--Test
-- This is developing, not completed yet. Don't run it on Production servers
 EXEC admin..SP_CPUAnalysis @analysis = 'highcpu', @database = 'stackoverflow2013', @suspecteduser = 'accounting', @cpucap = 1;
*/
BEGIN
    SET NOCOUNT ON;

    -- Check if analysis type is 'highcpu'
    IF @analysis = 'highcpu'
    BEGIN
        -- 1. Top 10 Connections in the Database
        IF OBJECT_ID('tempdb..#TopConnections') IS NOT NULL DROP TABLE #TopConnections;
        CREATE TABLE #TopConnections ([Top 10 Connections] INT IDENTITY(1,1), LoginName NVARCHAR(50), TotalConnections INT);

        INSERT INTO #TopConnections
        SELECT TOP 10 
            login_name AS LoginName, 
            COUNT(*) AS TotalConnections
        FROM sys.dm_exec_sessions 
        WHERE database_id = DB_ID(@database) 
          AND status IN ('sleeping', 'running')
        GROUP BY login_name;

        SELECT * FROM #TopConnections;

        -- 2. Top 10 CPU-Consuming Queries
        IF OBJECT_ID('tempdb..#TopCPUQueries') IS NOT NULL DROP TABLE #TopCPUQueries;
        CREATE TABLE #TopCPUQueries (
            [Top 10 CPU] INT IDENTITY(1,1),
            QueryText NVARCHAR(MAX),
            CPU_Time INT,
            SessionID INT,
            LoginName NVARCHAR(128),
            HostName NVARCHAR(128),
            ExecutionPlan XML
        );

        INSERT INTO #TopCPUQueries (QueryText, CPU_Time, SessionID, LoginName, HostName, ExecutionPlan)
        SELECT 
            SUBSTRING(ST.text, (ER.statement_start_offset / 2) + 1, 
                      ((CASE ER.statement_end_offset 
                            WHEN -1 THEN DATALENGTH(ST.text)
                            ELSE ER.statement_end_offset END 
                       - ER.statement_start_offset) / 2) + 1) AS QueryText,
            ER.cpu_time,
            ER.session_id,
            S.login_name,
            S.host_name,
            EP.query_plan AS ExecutionPlan
        FROM sys.dm_exec_requests AS ER
        JOIN sys.dm_exec_sessions AS S
            ON ER.session_id = S.session_id
        CROSS APPLY sys.dm_exec_sql_text(ER.sql_handle) AS ST
        OUTER APPLY sys.dm_exec_query_plan(ER.plan_handle) AS EP  -- Get the query plan if available
        WHERE ER.cpu_time > 0
          AND ER.session_id <> @@SPID  -- Exclude the current session
        ORDER BY ER.cpu_time DESC
        OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;

        SELECT * FROM #TopCPUQueries;

        -- 3. DAC Check (Only show if DAC is disabled)
        DECLARE @isDACEnabled BIT;
        SELECT @isDACEnabled = CAST(value_in_use AS BIT)
        FROM sys.configurations
        WHERE name = 'remote admin connections';

        IF @isDACEnabled = 0
        BEGIN
            PRINT 'DAC is not enabled. To enable it, use the following command:';
            PRINT 'EXEC sp_configure ''remote admin connections'', 1; RECONFIGURE;';
        END

        -- 4. Suspected User Actions (if provided)
        IF @suspecteduser IS NOT NULL
        BEGIN
            IF OBJECT_ID('tempdb..#SuspectedUserCommands') IS NOT NULL DROP TABLE #SuspectedUserCommands;
            CREATE TABLE #SuspectedUserCommands (
                CommandType NVARCHAR(50),
                [SQLCommand: Kill active; Deny/Grant access to the suspected user] NVARCHAR(MAX)
            );

            -- Kill command for suspected user's active sessions
            INSERT INTO #SuspectedUserCommands (CommandType, [SQLCommand: Kill active; Deny/Grant access to the suspected user])
            SELECT 
                'Kill Command',
                CONCAT('KILL ', S.session_id, ' -- Killing connection for suspected user: ', @suspecteduser)
            FROM sys.dm_exec_sessions AS S
            WHERE S.login_name = @suspecteduser
            AND S.is_user_process = 1;  -- Exclude system sessions

            -- Deny/Grant Connect SQL command for suspected user
            INSERT INTO #SuspectedUserCommands (CommandType, [SQLCommand: Kill active; Deny/Grant access to the suspected user])
            VALUES (
                'Grant/Deny Command',
                CONCAT('USE master; ', 'DENY CONNECT SQL TO ', QUOTENAME(@suspecteduser), '; GRANT CONNECT SQL TO ', QUOTENAME(@suspecteduser), ';')
            );

            SELECT * FROM #SuspectedUserCommands;
        END

        -- 5. CPU Cap Limiting (Resource Governor) if enabled
        IF @cpucap = 1
        BEGIN
            IF OBJECT_ID('tempdb..#CPUCapInfo') IS NOT NULL DROP TABLE #CPUCapInfo;
            CREATE TABLE #CPUCapInfo (
                [CPU Cap Limiting] NVARCHAR(MAX)
            );

            -- Fetch the current CPU cap from Resource Governor
            DECLARE @currentcpucap INT;

            SELECT @currentcpucap = CAP_CPU_PERCENT
            FROM sys.resource_governor_resource_pools
            WHERE name = 'default';

            -- Insert current CPU cap into the table
            INSERT INTO #CPUCapInfo ([CPU Cap Limiting])
            VALUES (CONCAT('-- Current CPU Cap for Resource Governor: ', @currentcpucap, '% (The default cap is 100%)'));

            -- Insert the syntax to set the new CPU cap
            INSERT INTO #CPUCapInfo ([CPU Cap Limiting])
            VALUES
                ('DECLARE @newcpucap INT = <putcaphere>; -- Insert your desired CPU cap like 60 for 60%:'),
                ('DECLARE @sql NVARCHAR(1000);'),
                ('SET @sql = N''ALTER RESOURCE POOL "default" WITH (CAP_CPU_PERCENT = '' + CAST(@newcpucap AS NVARCHAR(10)) + '');'''),
                ('EXEC sp_executesql @sql;'),
                ('ALTER RESOURCE GOVERNOR RECONFIGURE;');

            -- Display CPU cap info
            SELECT * FROM #CPUCapInfo;

            -- Cleanup CPU Cap info table
            DROP TABLE #CPUCapInfo;
        END

        -- Cleanup temporary tables
        DROP TABLE #TopCPUQueries;
        DROP TABLE #TopConnections;

        IF @suspecteduser IS NOT NULL
        BEGIN
            DROP TABLE #SuspectedUserCommands;
        END
    END
    ELSE
    BEGIN
        PRINT 'Invalid analysis parameter. Only "highcpu" is supported.';
    END
END
