CREATE OR ALTER PROCEDURE SP_CPUAnalysis
    @analysis NVARCHAR(50),
    @database NVARCHAR(128),
    @suspecteduser NVARCHAR(128) = NULL,
    @cpucap BIT = NULL -- Optional parameter to limit CPU cap
AS

/*
-- To make quick analysis and helpful to stem cpu. Don't apply on prod servers.
-- This will be edited soon
--For Test
-- EXEC SP_CPUAnalysis @analysis = 'highcpu', @database = 'stackoverflow2013', @suspecteduser = 'accounting', @cpucap = 1;;
*/
BEGIN
    SET NOCOUNT ON;

    -- Check if analysis type is 'highcpu'
    IF @analysis = 'highcpu'
    BEGIN
	Create table #topconnections ([Top10 Connections] INT IDENTITY(1,1),login_name nvarchar(50), totalconnection int)
	insert into #topconnections
	SELECT    TOP 10
	 login_name, COUNT(*) hastotalconnection
                 FROM sys.dm_exec_sessions 
                 WHERE database_id = DB_ID(@database) 
				 AND status IN ('sleeping', 'running') --and login_name not like NT, sa, domain\
				 group by login_name
select * from #topconnections
        -- 1. Top 10 CPU-Consuming Queries
        IF OBJECT_ID('tempdb..#TopCPUQueries') IS NOT NULL DROP TABLE #TopCPUQueries;
        CREATE TABLE #TopCPUQueries (
            [Top10 CPU] INT IDENTITY(1,1),
            QueryText NVARCHAR(MAX),
            CPU_Time INT,
            SessionID INT,
            LoginName NVARCHAR(128),
            HostName NVARCHAR(128),
            ExecutionPlan XML
        );

        -- Retrieve top 10 CPU-consuming queries, excluding the current session
        INSERT INTO #TopCPUQueries (QueryText, CPU_Time, SessionID, LoginName, HostName, ExecutionPlan)
        SELECT 
            SUBSTRING(ST.text, (ER.statement_start_offset / 2) + 1, 
                      ((CASE ER.statement_end_offset 
                            WHEN -1 THEN DATALENGTH(ST.text)
                            ELSE ER.statement_end_offset END 
                       - ER.statement_start_offset) / 2) + 1) AS QueryText,
            ER.cpu_time,
            ER.session_id,
            S.login_name,
            S.host_name,
            EP.query_plan AS ExecutionPlan
        FROM sys.dm_exec_requests AS ER
        JOIN sys.dm_exec_sessions AS S
            ON ER.session_id = S.session_id
        CROSS APPLY sys.dm_exec_sql_text(ER.sql_handle) AS ST
        OUTER APPLY sys.dm_exec_query_plan(ER.plan_handle) AS EP  -- Getting the query plan if available
        WHERE ER.cpu_time > 0
          AND ER.session_id <> @@SPID  -- Exclude the current session
        ORDER BY ER.cpu_time DESC
        OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;

        -- 2. DAC Check and Enabling Statement
        IF OBJECT_ID('tempdb..#DACStatement') IS NOT NULL DROP TABLE #DACStatement;
        CREATE TABLE #DACStatement (
            DACStatus NVARCHAR(255)
        );

        DECLARE @isDACEnabled BIT;
        SELECT @isDACEnabled = CAST(value_in_use AS BIT)
        FROM sys.configurations
        WHERE name = 'remote admin connections';

        IF @isDACEnabled = 0
        BEGIN
            INSERT INTO #DACStatement (DACStatus)
            VALUES ('Enable DAC: EXEC sp_configure ''remote admin connections'', 1; RECONFIGURE;');
        END
        ELSE
        BEGIN
            INSERT INTO #DACStatement (DACStatus)
            VALUES ('DAC is Enabled');
        END

        -- 3. Suspected User Actions
        IF @suspecteduser IS NOT NULL
        BEGIN
            -- Generate Kill and Connect Grant/Deny commands for the suspected user
            IF OBJECT_ID('tempdb..#SuspectedUserCommands') IS NOT NULL DROP TABLE #SuspectedUserCommands;
            CREATE TABLE #SuspectedUserCommands (
                StatementType NVARCHAR(50),
                SQLCommand NVARCHAR(MAX)
            );

            -- Kill command for all sessions of the suspected user
            INSERT INTO #SuspectedUserCommands (StatementType, SQLCommand)
            SELECT 
                'Kill Command',
                CONCAT('KILL ', S.session_id, ' -- Killing connection from the usual suspect')
            FROM sys.dm_exec_sessions AS S
            WHERE S.login_name = @suspecteduser
            AND S.is_user_process = 1;  -- Exclude system sessions

            -- Grant/Deny Connect SQL statements for the suspected user
            INSERT INTO #SuspectedUserCommands (StatementType, SQLCommand)
            VALUES (
                'Grant/Deny Command',
                CONCAT('USE master; ', 'DENY CONNECT SQL TO ', QUOTENAME(@suspecteduser), '; GRANT CONNECT SQL TO ', QUOTENAME(@suspecteduser), ';')
            );
        END

        -- Return results from tables
        SELECT * FROM #TopCPUQueries;
        SELECT * FROM #DACStatement;

        IF @suspecteduser IS NOT NULL
        BEGIN
            SELECT * FROM #SuspectedUserCommands;
        END

        -- 4. CPU Cap Limiting (Resource Governor) - Inserted into Table
        IF @cpucap = 1
        BEGIN
            IF OBJECT_ID('tempdb..#CPUCapInfo') IS NOT NULL DROP TABLE #CPUCapInfo;
            CREATE TABLE #CPUCapInfo (
                Info NVARCHAR(MAX)
            );

            -- Fetch the current CPU cap from Resource Governor
            DECLARE @currentcpucap INT;

            SELECT @currentcpucap = CAP_CPU_PERCENT
            FROM sys.resource_governor_resource_pools
            WHERE name = 'default';

            -- Insert the current CPU cap
            INSERT INTO #CPUCapInfo (Info)
            VALUES (CONCAT('-- Current CPU Cap for Resource Governor: ', @currentcpucap, '%'));

            -- Insert the syntax to set the new CPU cap
            INSERT INTO #CPUCapInfo (Info)
            VALUES 
            ('DECLARE @newcpucap INT = putvaluehere; -- Insert your desired CPU cap'),
            ('ALTER RESOURCE POOL "default" WITH (CAP_CPU_PERCENT = @newcpucap);'),
            ('ALTER RESOURCE GOVERNOR RECONFIGURE;');

            -- Return the CPU Cap information
            SELECT * FROM #CPUCapInfo;

            -- Cleanup CPU Cap info table
            DROP TABLE #CPUCapInfo;
        END

        -- Cleanup
        DROP TABLE #TopCPUQueries;
        DROP TABLE #DACStatement;
		 DROP TABLE #topconnections;

        IF @suspecteduser IS NOT NULL
        BEGIN
            DROP TABLE #SuspectedUserCommands;
        END
    END
    ELSE
    BEGIN
        PRINT 'Invalid analysis parameter. Only "highcpu" is supported.';
    END
END
GO
